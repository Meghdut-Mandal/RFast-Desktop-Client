/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.Hashtable;

import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author KIIT
 */
public class QRProvider extends javax.swing.JFrame {

    /**
     * Creates new form QRProvider
     */
    public QRProvider() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLine = new javax.swing.JLabel();
        connectionStatus = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        imageLabel = new ImagePanel();
        messageStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLine.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLine.setText("Welcome to RFast");

        connectionStatus.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        connectionStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectionStatus.setText("Waiting for Connection");

        imageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imageLabel.setMaximumSize(new java.awt.Dimension(400, 400));
        imageLabel.setMinimumSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout imageLabelLayout = new javax.swing.GroupLayout(imageLabel);
        imageLabel.setLayout(imageLabelLayout);
        imageLabelLayout.setHorizontalGroup(
            imageLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imageLabelLayout.setVerticalGroup(
            imageLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        messageStatus.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        messageStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                    .addComponent(titleLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectionStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(messageStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(messageStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



      public static void startUI(){
         java.awt.EventQueue.invokeLater(() -> {
              QRProvider qrProvider = new QRProvider();
              qrProvider.setVisible(true);
              qrProvider.encodeText("Hello world");
          });
      }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
         MainAppKt.main();
    }

    private static BufferedImage createQRImage(String qrCodeText, int size) throws WriterException {
        // Create the ByteMatrix for the QR-Code that encodes the given String
        Hashtable hintMap = new Hashtable();
        hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix byteMatrix = qrCodeWriter.encode(qrCodeText,
                BarcodeFormat.QR_CODE, size, size, hintMap);
        // Make the BufferedImage that are to hold the QRCode
        int matrixWidth = byteMatrix.getWidth();
        BufferedImage image = new BufferedImage(matrixWidth, matrixWidth,
                BufferedImage.TYPE_INT_RGB);
        image.createGraphics();

        Graphics2D graphics = (Graphics2D) image.getGraphics();
        graphics.setColor(Color.WHITE);
        graphics.fillRect(0, 0, matrixWidth, matrixWidth);
        // Paint and save the image using the ByteMatrix
        graphics.setColor(Color.BLACK);

        for (int i = 0; i < matrixWidth; i++) {
            for (int j = 0; j < matrixWidth; j++) {
                if (byteMatrix.get(i, j)) {
                    graphics.fillRect(i, j, 1, 1);
                }
            }
        }
        return image;
    }

    public void seImage(BufferedImage image) {
        ImagePanel imagePanel = (ImagePanel) imageLabel;
        imagePanel.setImage(image);
        imageLabel.repaint();
    }

    public void encodeText(String text) {
        int min = Math.min(imageLabel.getWidth(), imageLabel.getHeight());
        imageLabel.setBounds(imageLabel.getX(), imageLabel.getY(), min, min);
        BufferedImage image = null;
        try {
            image = createQRImage(text, imageLabel.getWidth());
        } catch (WriterException e) {
            e.printStackTrace();
        }
        seImage(image);
    }

    public void setMessage(String text){
        messageStatus.setText(text);
    }


    public void setConnectionMessage(String text){
        connectionStatus.setText(text);
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel connectionStatus;
    public javax.swing.JPanel imageLabel;
    public javax.swing.JLabel messageStatus;
    public javax.swing.JProgressBar progressBar;
    public javax.swing.JLabel titleLine;
    // End of variables declaration//GEN-END:variables
}
